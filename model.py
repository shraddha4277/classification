# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10gDtqodlKUZ_tWPNNzHlPyie7nRtHBpV
"""

!pip install pydicom Pillow tensorflow flask

import pydicom
from PIL import Image
import numpy as np

def dicom_to_jpg(dicom_file, output_file):
    # Read the DICOM file
    ds = pydicom.dcmread('/content/drive/MyDrive/ARJUN YADAV  35YM_36263_115723/ARJUN YADAV  35YM_36263_115723/1.0_Thin_CONTRAST_121050_302/00000001.dcm')

    # Convert the DICOM pixel data to a numpy array
    pixel_array = ds.pixel_array

    # Normalize the pixel array to the range 0-255
    image_2d = pixel_array.astype(float)
    image_2d = (np.maximum(image_2d, 0) / image_2d.max()) * 255.0
    image_2d = np.uint8(image_2d)

    # Create an image from the numpy array
    image = Image.fromarray(image_2d)

    # Save the image as a JPEG file
    image.save(output_file)

# Example usage
dicom_to_jpg('path/to/your/dicom/file.dcm', 'output.jpg')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Data generators for training and validation
train_datagen = ImageDataGenerator(rescale=0.255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
val_datagen = ImageDataGenerator(rescale=0.255)

train_generator = train_datagen.flow_from_directory('/content/drive/MyDrive/Kaggle Dataset-20240720T093725Z-001/Kaggle Dataset/Dataset/train', target_size=(256, 256), color_mode='grayscale', batch_size=32, class_mode='binary')
val_generator = val_datagen.flow_from_directory('/content/drive/MyDrive/Kaggle Dataset-20240720T093725Z-001/Kaggle Dataset/Dataset/unseen_demo_images', target_size=(256, 256), color_mode='grayscale', batch_size=32, class_mode='binary')

# Train the model
model.fit(train_generator, epochs=4, validation_data=val_generator)

# Save the model
model.save('SavedModel')